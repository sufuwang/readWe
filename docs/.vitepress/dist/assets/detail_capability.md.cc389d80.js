import{_ as e,o,c,V as d}from"./chunks/framework.85ff9826.js";const m=JSON.parse('{"title":"What can i do for you?","description":"","frontmatter":{},"headers":[],"relativePath":"detail/capability.md","filePath":"detail/capability.md","lastUpdated":null}'),a={name:"detail/capability.md"},t=d('<h1 id="what-can-i-do-for-you" tabindex="-1">What can i do for you? <a class="header-anchor" href="#what-can-i-do-for-you" aria-label="Permalink to &quot;What can i do for you?&quot;">​</a></h1><blockquote><p>As a Front End Developer, I can&#39;t do everything, but i will be Full Stack Developer</p></blockquote><h2 id="互联网方向" tabindex="-1">互联网方向 <a class="header-anchor" href="#互联网方向" aria-label="Permalink to &quot;互联网方向&quot;">​</a></h2><p>这是我当前的工作内容，计算机行业我是从 <code>React</code> 起步的，<code>hooks</code> 设计思想让我觉得我是在一件艺术品，可是小公司 <code>Vue@2</code> 项目迫使我向生活低头，但这使我学会了多个框架的多个版本，比如 <code>React@16</code>、<code>React@18</code>、<code>Vue@2</code>、<code>Vue@3</code>，至今没有写过 <code>Angular</code> 项目，（前端框架真的需要这么多嘛？😭 学不过来了，<a href="https://github.com/yyx990803" target="_blank" rel="noreferrer">yyx</a> 写代码速度远超我学习新 <code>API</code> 的速度），框架版本会导致打包工具的不同，所以我又学会了 <code>Webpack</code>、<code>Vite</code>，便又学会了写 <code>Vite</code> 和 <code>Rollup</code> 的插件，对应的自动化测试框架有 <code>Jest</code>、<code>Vitest</code>，对应的组件库 <code>antd</code>、<code>element</code>，现在又有了 <code>tedsign</code>，因为大前端的发展学会了 <code>Uniapp</code>，在业务实现上的广度被生活逐渐拉宽。</p><p>工作期间我对<b>前端基建、性能优化</b>充满期待。</p><p>前端基建来说，公司内部使用 <code>Jenkis</code> 实现 <code>CI/CD</code>，我自己的项目使用 <code>Github Actions</code> 和 <code>Docker</code> 实现 <code>CI/CD</code>，研究 <code>npm</code>、<code>yarn</code>、<code>pnpm</code> 的机制，实现两个项目之间的 <code>Symbolic Link</code>，分别使用 <code>git submodule</code>、<code>git subtree</code>和 <code>MonoRepo</code> 实现多子库项目的维护，这些东西听起来就让人心潮澎湃。</p><p>性能优化方面，<code>Service Worker</code> 是我一直想实现的性能优化方案，可是接触到的项目很少有能够需要 <code>Service Worker</code> 的时候，强硬地上线 <code>Service Worker</code>，等待我的只有年底的<i>UnderPerformance</i>，`Peace and Love` for us。</p><p>我自己学习的前端知识有 <code>VitePress</code>、<code>Nuxt</code>、<code>Leaflet</code>，你所看到的网站就是用 <code>VitePress</code> 写的。后端知识比较薄弱，<code>node</code> 生态下的 <code>Koa</code>、<code>Express</code> 写起来还是没有问题的，当前简单的前端前端监控也是可以实现的。</p><p><b>😊 我可以做基于上述内容所提到的技术的任意项目，如果你需要后端是用 <code>Go</code> 实现的话，我们可以做一起完成这项工作，承诺无偿。</b></p><h2 id="自动化方向" tabindex="-1">自动化方向 <a class="header-anchor" href="#自动化方向" aria-label="Permalink to &quot;自动化方向&quot;">​</a></h2><p>这算是我的老本行，从一开始的 <code>stm32</code> 到最后 <code>FPGA</code>，抱歉我都不怎么会，不过之前为哈工大一个博士做过一个使用 <code>Arduino</code> 来控制硬件设备的项目，使用 <a href="https://www.ni.com/zh-cn/shop/labview.html" target="_blank" rel="noreferrer">Labview</a> 控制，现在已经把相关知识还给了书本。简而言之，关于自动化方向的硬件设备，你如果问我相关问题的话，那你算是问错人了，不过我实验室师兄师姐学弟学妹可是一把好手，我可以介绍你们认识。</p><p><b>😊 我可以做 <a href="https://www.ni.com/zh-cn.html" target="_blank" rel="noreferrer">NI</a> 相关的 <a href="https://www.ni.com/zh-cn/shop/labview.html" target="_blank" rel="noreferrer">Labview</a> 和 <a href="https://www.ni.com/zh-cn/shop/engineering-education/portable-student-devices/myrio-student-embedded-device/what-is-myrio.html" target="_blank" rel="noreferrer">myRIO</a> 相关的任何东西，以计算机专业基础知识（设计模式、网络协议等）来实现自动化方向的软件实现，简直是如虎添翼。如果你的项目使用到了 <code>NI</code> 的任意一款硬件设备，我们可以做一起完成这项工作，承诺无偿。</b></p><p>初识 <code>Labview</code> 是因为本科毕业设计，题目要求使用 <code>Labview</code> 实现 <code>TCP</code> 消息流的处理，就是用自己模拟 <code>TCP</code> 生产和消费（生产者消费者设计模式），然后对消息进行解析，实现前台对应展示，很像工控设备的可视化。深入了解的过程中，认识了 <code>myRIO</code> 这个好朋友，<code>myRIO</code> 对于学生非常友好，超强的新手引导，上手极快，内部保护机制可以防止大多数低级错误，比如高电流烧坏芯片什么的，所以在研一的时候花了 4500 大洋买了一个，导师也很认可这个东西，果断从我手中买走了，所以学校实验室的所有项目几乎都是我用 <code>Labview</code> 和 <code>myRIO</code> 的组合完成的，用这个组合也为学校其他院校写过东西，为材料的师兄写过示波器和放大器的控制，为成电自动化学院的同学写过无人机的 <code>PID</code> 控制，但是 <code>NI</code> 的设备是非常贵的，一份价钱一分货，还在其他实验室见过 <a href="https://www.ni.com/zh-cn/shop/data-acquisition/entry-level-usb-daq.html" target="_blank" rel="noreferrer">DAQ</a> ，不得不说，<code>NI</code> 做的东西是真的让人赏心悦目。</p><h2 id="其他方向" tabindex="-1">其他方向 <a class="header-anchor" href="#其他方向" aria-label="Permalink to &quot;其他方向&quot;">​</a></h2><p>我可以提供基于 <code>Nginx</code> 或者 <code>Docker</code> 的项目部署、域名解析、<code>https</code> 证书、基于 <code>Docker</code> 镜像的版本管理、<code>CDN</code> 缓存等服务，主打一个客户就是上帝。</p>',15),r=[t];function i(n,l,s,h,p,b){return o(),c("div",null,r)}const _=e(a,[["render",i]]);export{m as __pageData,_ as default};
